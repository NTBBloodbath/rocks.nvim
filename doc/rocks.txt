==============================================================================
Table of Contents                                               *rocks.contents*

rocks.nvim ····························································· |rocks|
rocks.nvim commands ··········································· |rocks.commands|
rocks.nvim configuration ········································ |rocks.config|
rocks.nvim Lua API ················································· |rocks.api|
rocks.nvim logging API ············································· |rocks.log|

==============================================================================
rocks.nvim                                                               *rocks*


A luarocks plugin manager for Neovim.


==============================================================================
rocks.nvim commands                                             *rocks.commands*


 `:Rocks[!] {command {args?}}`

 command	  	                     action
------------------------------------------------------------------------------

 install {rock} {version?}  	     Install {rock} with optional {version}.
 prune {rock}                     Uninstall {rock} and its stale dependencies,
                                  and remove it from rocks.toml.
 sync                             Synchronize installed rocks with rocks.toml.
                                  It may take more than one sync to prune all rocks that can be pruned.
 update                           Search for updated rocks and install them.
 edit                             Edit the rocks.toml file.
 packadd {rock}                   Search for an optional rock and source any plugin files found.
                                  The rock must be installed by luarocks.
                                  It is added to the 'runtimepath' if it wasn't there yet.
                                  If `Rocks` is called with the optional `!`, the rock is added
                                  to the 'runtimepath' and no 'plugin' or 'ftdetect' scripts are
                                  sourced.
                                  This command aims to behave similarly to the builtin 'packadd'.
                                  To make a rock optional, set `opt = true` in `rocks.toml`.
 log                              Open the log file.


==============================================================================
rocks.nvim configuration                                          *rocks.config*


 rocks.nvim configuration options

>
 ---@type RocksOpts
 vim.g.rocks_nvim
<


RocksOpts                                                            *RocksOpts*

    Fields: ~
        {rocks_path?}       (string)   Local path in your filesystem to install rocks. Defaults to a `rocks` directory in `vim.fn.stdpath("data")`.
        {config_path?}      (string)   Rocks declaration file path. Defaults to `rocks.toml` in `vim.fn.stdpath("config")`.
        {luarocks_binary?}  (string)   Luarocks binary path. Defaults to `luarocks`.
        {lazy?}             (boolean)  Whether to query luarocks.org lazily. Defaults to `false`. Setting this to `true` may improve startup time, but features like auto-completion will lag initially.
        {dynamic_rtp?}      (boolean)  Whether to automatically add freshly installed plugins to the 'runtimepath'. Defaults to `true` for the best default experience.


==============================================================================
rocks.nvim Lua API                                                   *rocks.api*


The Lua API for rocks.nvim.
Intended for use by modules that extend this plugin.


rock_name                                                            *rock_name*

    Type: ~
        string


Rock                                                                      *Rock*

    Fields: ~
        {name}     (rock_name)
        {version}  (string)


api.try_get_cached_rocks()                            *api.try_get_cached_rocks*
    Tries to get the cached rocks.
    Returns an empty list if the cache has not been populated
    or no connection to luarocks.org can be established.
    Will spawn an async task to attempt to populate the cache
    if it is not ready.

    Returns: ~
        (table<rock_name,Rock[]>)  rocks


api.query_luarocks_rocks({callback})                  *api.query_luarocks_rocks*
    Queries luarocks.org for rocks and passes the rocks
    to a callback. Invokes the callback with an empty table
    if no rocks are found or no connection to luarocks.org can be established.

    Parameters: ~
        {callback}  (fun(rocks:table<rock_name,Rock[]>))  @async


FuzzyFilterOpts                                                *FuzzyFilterOpts*

    Fields: ~
        {sort?}  (boolean)  Whether to sort the results (default: `true`).


                                                     *api.fuzzy_filter_rock_tbl*
api.fuzzy_filter_rock_tbl({rock_tbl}, {query}, {opts?})
    @generic T

    Parameters: ~
        {rock_tbl}  (table<rock_name,T>)
        {query}     (string)
        {opts?}     (FuzzyFilterOpts)

    Returns: ~
        (table<rock_name,T>)


api.query_installed_rocks({callback})                *api.query_installed_rocks*
    Query for installed rocks.
    Passes the installed rocks (table indexed by name) to a callback when done.

    Parameters: ~
        {callback}  (fun(rocks:table<rock_name,Rock>))  @async


api.get_rocks_toml_path()                              *api.get_rocks_toml_path*
    Gets the rocks.toml file path.
    Note that the file may not have been created yet.

    Returns: ~
        (string)  rocks_toml_file_path


RockSpec                                                              *RockSpec*


        { name: rock_name, version?: string, opt?: boolean, [string]: V }

Specification for a rock in rocks.toml.

RocksToml                                                            *RocksToml*


        { rocks?: RockSpec[], plugins?: RockSpec[], [string]: V }

Content of rocks.toml

api.get_rocks_toml()                                        *api.get_rocks_toml*
    Returns a table with the parsed rocks.toml file.
    If the file doesn't exist a file with the default configuration will be created.

    Returns: ~
        (RocksToml)


api.get_user_rocks()                                        *api.get_user_rocks*
    Returns a table with the rock specifications parsed from the rocks.toml file.
    If the file doesn't exist a file with the default configuration will be created.

    Returns: ~
        (RockSpec[])


RocksCmd                                                              *RocksCmd*

    Fields: ~
        {impl}       (fun(args:string[],opts:vim.api.keyset.user_command))  The command implementation
        {complete?}  (fun(subcmd_arg_lead:string):string[])                 Command completions callback, taking the lead of the subcommand's arguments


                                                 *api.register_rocks_subcommand*
api.register_rocks_subcommand({name}, {cmd})
    Register a `:Rocks` subcommand.

    Parameters: ~
        {name}  (string)    The name of the subcommand to register
        {cmd}   (RocksCmd)


rock_handler_callback                                    *rock_handler_callback*

    Type: ~
        fun(report_progress:fun(message:string),report_error:fun(message:string))


A function that operates on the rock, syncing it with the entry in rocks.toml

RockHandler                                                        *RockHandler*

    Fields: ~
        {get_sync_callback}   (fun(spec:RockSpec):rock_handler_callback|nil)                    Return a function that installs or updates the rock, or `nil` if the handler cannot or does not need to sync the rock.
        {get_prune_callback}  (fun(specs:table<rock_name,RockSpec>):rock_handler_callback|nil)  Return a function that prunes unused rocks, or `nil` if the handler cannot or does not need to prune any rocks.


api.register_rock_handler({handler})                 *api.register_rock_handler*

    Parameters: ~
        {handler}  (RockHandler)


==============================================================================
rocks.nvim logging API                                               *rocks.log*


The logging interface for rocks.nvim.
Intended to be used by external modules.


log.trace()                                                          *log.trace*


log.debug()                                                          *log.debug*


log.info()                                                            *log.info*


log.warn()                                                            *log.warn*


log.error()                                                          *log.error*


vim:tw=78:ts=8:noet:ft=help:norl:
